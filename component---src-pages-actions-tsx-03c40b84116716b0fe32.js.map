{"version":3,"sources":["webpack:///./src/pages/actions.tsx","webpack:///./src/icons/icons.svg","webpack:///./src/graphql/gatsby.ts","webpack:///./src/components/Icon.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/components/MegaMenu.tsx","webpack:///./src/components/MainHeader.tsx","webpack:///./src/components/SlimHeader.tsx","webpack:///./src/components/Layout.tsx","webpack:///./src/components/Seo.tsx","webpack:///./src/components/BodyStyles.tsx"],"names":["query","ActionsPage","_ref","data","t","useTranslation","siteConfig","getSiteConfig","react__WEBPACK_IMPORTED_MODULE_2__","_components_Layout__WEBPACK_IMPORTED_MODULE_6__","menu","getMenu","title","_components_BodyStyles__WEBPACK_IMPORTED_MODULE_5__","backgroundColor","_components_Seo__WEBPACK_IMPORTED_MODULE_7__","forms","edges","getForms","map","_ref2","node","key","id","gatsby__WEBPACK_IMPORTED_MODULE_1__","to","name","module","exports","__webpack_require__","p","d","__webpack_exports__","getForm","Array","isArray","formId","allFormYaml","filter","Icon","className","icon","props","_objectWithoutPropertiesLoose","react","Object","assign","classNames","xlinkHref","Icons","Footer","footerLinks","socialLinks","author","authorLogo","authorUrl","Footer_objectWithoutPropertiesLoose","Container","Row","Col","xs","sm","md","href","target","src","alt","height","style","maxWidth","es","i18nKey","socialLink","url","aria-label","components_Icon","footerLink","gatsby_browser_entry","color","dropdownModifiers","isOffcanvasOpen","relativePosition","enabled","fn","styles","position","transform","borderRadius","animationDuration","MegaMenu","user","_React$useState","React","setIsOffcanvasOpen","_React$useState2","isDropdownOpen","setIsDropdownOpen","type","aria-controls","aria-expanded","onClick","CSSTransition","in","timeout","enter","exit","enterDone","exitDone","menuItem","userHasAnyRole","roles","subtree","Dropdown","slug","tag","isOpen","toggle","_setIsDropdownOpen","DropdownToggle","caret","activeClassName","role","cursor","fill","DropdownMenu","modifiers","item","DropdownItem","MainHeader","description","organization","components_MegaMenu","flip","shift","preventOverflow","boundariesElement","SlimHeader","owners","slimHeaderLinks","languages","onLogout","i18n","isLanguageDropdownOpen","setIsLanguageDropdownOpen","isUserDropdownOpen","setIsUserDropdownOpen","_React$useState3","isLinksDropdownOpen","setIsLinksDropdownOpen","owner","e","preventDefault","slimHeaderLink","language","lang","changeLanguage","isLoggedIn","marginRight","userEmail","userId","require","Layout","children","sessionInfo","getSessionInfo","components_SlimHeader","regenerator_default","a","mark","_callee","wrap","_context","prev","next","logout","GraphqlClient","navigate","stop","components_MainHeader","organizationName","components_Footer","react__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","n","SEO","_ref$lang","_ref$meta","meta","keywords","htmlAttributes","content","property","concat","BodyStyles"],"mappings":"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","file":"component---src-pages-actions-tsx-03c40b84116716b0fe32.js","sourcesContent":["import { graphql, Link } from \"gatsby\";\nimport * as React from \"react\";\n\nimport {\n  getMenu,\n  getSiteConfig,\n  // @ts-ignore\n  PageConfigFragment\n} from \"../graphql/gatsby\";\n\nimport { useTranslation } from \"react-i18next\";\nimport BodyStyles from \"../components/BodyStyles\";\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/Seo\";\nimport { ActionsPageConfig } from \"../generated/graphql/ActionsPageConfig\";\n\nconst getForms = (data: ActionsPageConfig) => data.forms!.edges;\n\nconst ActionsPage = ({ data }: { data: ActionsPageConfig }) => {\n  const { t } = useTranslation();\n  const siteConfig = getSiteConfig(data);\n  return (\n    <Layout\n      menu={getMenu(data)}\n      siteConfig={siteConfig}\n      title={t(\"pages.action_page_title\")}\n    >\n      <BodyStyles backgroundColor=\"#e7e6ff\" />\n      <SEO title={t(\"pages.action_page_title\")} siteConfig={siteConfig} />\n      <ul>\n        {getForms(data).map(({ node }) => {\n          return (\n            <li key={node.id}>\n              <Link to={`/form/${node.id}`}>{node.name}</Link>\n            </li>\n          );\n        })}\n      </ul>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query ActionsPageConfig {\n    menu: allConfigYaml(\n      filter: { menu: { elemMatch: { name: { ne: null } } } }\n    ) {\n      ...PageConfigFragment\n    }\n    siteConfig: allConfigYaml(filter: { title: { ne: null } }) {\n      ...SiteConfigFragment\n    }\n    forms: allFormYaml(filter: { enabled: { eq: true } }) {\n      edges {\n        node {\n          id\n          version\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default ActionsPage;\n","module.exports = __webpack_public_path__ + \"static/icons-6642dbab43a8aaf04fc37cc89429ceb5.svg\";","import { graphql } from \"gatsby\";\nimport { FormConfig } from \"../generated/graphql/FormConfig\";\nimport {\n  PageConfig,\n  PageConfig_menu_edges_node_menu,\n  PageConfig_siteConfig_edges_node\n} from \"../generated/graphql/PageConfig\";\nimport { ViewConfig } from \"../generated/graphql/ViewConfig\";\nimport { FormT } from \"../utils/forms\";\n\nexport const FormSchemaFragment = graphql`\n  fragment FormSchemaFragment on FormYamlConnection {\n    edges {\n      node {\n        id\n        name\n        version\n        language\n        enabled\n        slug_pattern\n        title_pattern\n        sections {\n          title\n          name\n          description\n          groups {\n            name\n            title\n            description\n            repeatable\n            fields {\n              default\n              default_checked\n              default_multiple_selection\n              description\n              name\n              multiple\n              title\n              widget\n              show_if\n              valid_if\n              required_if\n              error_msg\n              computed_value\n              options {\n                value\n                label\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const PageConfigFragment = graphql`\n  fragment PageConfigFragment on ConfigYamlConnection {\n    edges {\n      node {\n        menu {\n          name\n          slug\n          roles\n        }\n      }\n    }\n  }\n`;\n\nexport const getMenu = (\n  data: PageConfig\n): ReadonlyArray<PageConfig_menu_edges_node_menu | null> | null =>\n  data.menu && Array.isArray(data.menu.edges) && data.menu.edges[0]\n    ? data.menu.edges[0].node.menu\n    : null;\n\nexport const getSiteConfig = (\n  data: PageConfig\n): PageConfig_siteConfig_edges_node | null =>\n  data.siteConfig &&\n  Array.isArray(data.siteConfig.edges) &&\n  data.siteConfig.edges[0]\n    ? data.siteConfig.edges[0].node\n    : null;\n\nexport function getForm(\n  data: FormConfig | ViewConfig,\n  formId?: string\n): FormT | null {\n  if (!formId) {\n    return null;\n  }\n  const forms = data.allFormYaml\n    ? data.allFormYaml.edges.filter(node => node.node.id === formId)\n    : null;\n  if (!forms || !forms[0] || !forms[0].node) {\n    return null;\n  }\n  return forms[0].node;\n}\n\nexport const SiteConfigFragment = graphql`\n  fragment SiteConfigFragment on ConfigYamlConnection {\n    edges {\n      node {\n        title\n        description\n        defaultLanguage\n        author\n        authorLogo\n        authorUrl\n        homepage\n        owners {\n          name\n          url\n        }\n        languages {\n          name\n        }\n        slimHeaderLinks {\n          name\n          url\n        }\n        socialLinks {\n          name\n          url\n          icon\n        }\n        footerLinks {\n          name\n          url\n        }\n      }\n    }\n  }\n`;\n","import classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport Icons from \"../icons/icons.svg\";\n\ntype IconProps = { className?: string; icon: string } & React.SVGProps<\n  SVGSVGElement\n>;\n\nconst Icon = ({ className, icon, ...props }: IconProps) => (\n  <svg className={classNames(\"icon\", className)} {...props}>\n    <use xlinkHref={`${Icons}#it-${icon}`} />\n  </svg>\n);\n\nexport default Icon;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\n\nimport { Trans } from \"react-i18next\";\nimport { getSiteConfig } from \"../graphql/gatsby\";\nimport Icon from \"./Icon\";\n\ntype FooterProps = Pick<\n  NonNullable<ReturnType<typeof getSiteConfig>>,\n  // tslint:disable-next-line: max-union-size\n  \"footerLinks\" | \"socialLinks\" | \"author\" | \"authorLogo\" | \"authorUrl\"\n> & { id: string };\n\nconst Footer = ({\n  footerLinks,\n  socialLinks,\n  author,\n  authorLogo,\n  authorUrl,\n  ...props\n}: FooterProps) => (\n  <footer className=\"neutral-1-bg-a9\" {...props}>\n    <Container>\n      <Row className=\"py-4\">\n        <Col xs=\"12\" sm=\"6\" md=\"4\">\n          <div className=\"px-2 py-3\">\n            <a href={authorUrl || \"\"} target=\"_blank\">\n              <img\n                src={authorLogo || \"\"}\n                alt={author || \"\"}\n                height=\"36\"\n                style={{ maxWidth: `100%` }}\n              />\n            </a>\n          </div>\n        </Col>\n        <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"d-flex\">\n          <div className=\"px-2 py-2\" />\n        </Col>\n        <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"text-white text-right pt-2\">\n          <span>\n            <Trans i18nKey=\"follow_us\" />\n          </span>\n          {(socialLinks || []).map(\n            socialLink =>\n              socialLink &&\n              socialLink.icon &&\n              socialLink.name &&\n              socialLink.url && (\n                <a\n                  className=\"text-white p-2\"\n                  key={socialLink.icon}\n                  href={socialLink.url}\n                  aria-label={socialLink.name}\n                >\n                  <Icon\n                    icon={socialLink.icon}\n                    className=\"icon-sm icon-light align-top\"\n                  />\n                </a>\n              )\n          )}\n        </Col>\n      </Row>\n      <Row className=\"py-4 border-white border-top\">\n        <ul className=\"col list-inline small\">\n          {(footerLinks || []).map(\n            footerLink =>\n              footerLink &&\n              footerLink.name &&\n              footerLink.url && (\n                <li key={footerLink.name} className=\"list-inline-item px-1\">\n                  <Link\n                    className=\"small-prints font-weight-bold\"\n                    style={{ color: \"#0bd9d2\" }}\n                    to={footerLink.url}\n                  >\n                    {footerLink.name}\n                  </Link>\n                </li>\n              )\n          )}\n        </ul>\n      </Row>\n    </Container>\n  </footer>\n);\n\nexport default Footer;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from \"reactstrap\";\nimport { getMenu } from \"../graphql/gatsby\";\nimport { getSessionInfo, userHasAnyRole } from \"../utils/auth\";\nimport Icon from \"./Icon\";\n\ntype MegaMenuProps = {\n  menu: ReturnType<typeof getMenu>;\n  user: ReturnType<typeof getSessionInfo>;\n};\n\nconst BACKGROUND_COLOR = \"#ffffff\";\nconst FOREGROUND_COLOR = \"#455B71\";\n\nconst dropdownModifiers = (isOffcanvasOpen: boolean) => ({\n  relativePosition: {\n    enabled: true,\n    fn: (data: any) =>\n      isOffcanvasOpen\n        ? {\n            ...data,\n            styles: {\n              ...data.styles,\n              position: \"relative\",\n              transform: \"none\"\n            }\n          }\n        : {\n            ...data,\n            styles: {\n              ...data.styles,\n              borderRadius: \"4px\",\n              transform: \"translate3d(15px, 65px, 0px)\",\n              animationDuration: \"0.2s\"\n            }\n          }\n  }\n});\n\nexport const MegaMenu = ({ menu, user }: MegaMenuProps) => {\n  if (!menu) {\n    return null;\n  }\n  const [isOffcanvasOpen, setIsOffcanvasOpen] = React.useState(false);\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState({} as Record<\n    string,\n    boolean\n  >);\n\n  const { t } = useTranslation();\n\n  return (\n    <nav className=\"navbar navbar-expand-lg has-megamenu\">\n      <button\n        className=\"custom-navbar-toggler\"\n        type=\"button\"\n        aria-controls=\"navbarNavC\"\n        aria-expanded={isOffcanvasOpen}\n        aria-label={t(\"toggle_navigation\")}\n        onClick={() => setIsOffcanvasOpen(!isOffcanvasOpen)}\n      >\n        <Icon className=\"icon icon-sm icon-light\" icon=\"burger\" />\n      </button>\n\n      <CSSTransition\n        in={isOffcanvasOpen}\n        timeout={{\n          enter: 1,\n          exit: 300\n        }}\n        classNames={{\n          enter: \"navbar-collapsable d-block\",\n          enterDone: \"navbar-collapsable d-block expanded\",\n          exit: \"navbar-collapsable d-block\",\n          exitDone: \"navbar-collapsable\"\n        }}\n      >\n        <div className={`navbar-collapsable`} id=\"navbarNavC\">\n          <div\n            className={`overlay ${isOffcanvasOpen ? \"d-block\" : \"d-none\"}`}\n            onClick={() => setIsOffcanvasOpen(!isOffcanvasOpen)}\n          />\n          <div className=\"close-div sr-only\">\n            <button\n              className=\"btn close-menu\"\n              type=\"button\"\n              onClick={() => setIsOffcanvasOpen(!isOffcanvasOpen)}\n            >\n              <Icon className=\"icon icon-sm icon-light\" icon=\"close\" />\n              {t(\"close\")}\n            </button>\n          </div>\n          <div className=\"menu-wrapper\">\n            <ul className=\"navbar-nav megamenu-top-links shadow-md mt-4\">\n              {menu.map(menuItem => {\n                return (\n                  menuItem &&\n                  menuItem.name &&\n                  userHasAnyRole(\n                    user,\n                    (menuItem.roles as ReadonlyArray<string>) || []\n                  ) &&\n                  // TODO: remove cast\n                  ((menuItem as any).subtree ? (\n                    <Dropdown\n                      key={menuItem.slug!}\n                      className=\"nav-item megamenu\"\n                      tag=\"li\"\n                      isOpen={isDropdownOpen[menuItem.slug!]}\n                      toggle={() =>\n                        setIsDropdownOpen({\n                          [menuItem.slug!]: isDropdownOpen[menuItem.slug!]\n                            ? !isDropdownOpen[menuItem.slug!]\n                            : true\n                        })\n                      }\n                    >\n                      <DropdownToggle\n                        caret={true}\n                        tag=\"a\"\n                        className=\"nav-link megamenu-top-link font-weight-600\"\n                        activeClassName=\"active\"\n                        role=\"button\"\n                        style={{\n                          cursor: \"pointer\"\n                        }}\n                      >\n                        {t(menuItem.name)}\n                        <Icon\n                          className=\"icon d-inline-block\"\n                          icon=\"expand\"\n                          style={{\n                            fill: !isOffcanvasOpen\n                              ? FOREGROUND_COLOR\n                              : BACKGROUND_COLOR\n                          }}\n                        />\n                      </DropdownToggle>\n                      <DropdownMenu\n                        modifiers={dropdownModifiers(isOffcanvasOpen)}\n                      >\n                        <div className=\"link-list-wrapper\">\n                          <ul className=\"mt-2\">\n                            {/* TODO: remove cast */}\n                            {(menuItem as any).subtree.map(\n                              (item: any) =>\n                                item &&\n                                item.slug && (\n                                  <DropdownItem\n                                    tag=\"li\"\n                                    key={item.slug}\n                                    className=\"p-0\"\n                                  >\n                                    <Link to={item.slug} className=\"p-0\">\n                                      {t(item.name)}\n                                    </Link>\n                                  </DropdownItem>\n                                )\n                            )}\n                          </ul>\n                        </div>\n                      </DropdownMenu>\n                    </Dropdown>\n                  ) : (\n                    userHasAnyRole(\n                      user,\n                      (menuItem.roles as ReadonlyArray<string>) || []\n                    ) && (\n                      <li className=\"nav-item megamenu\" key={menuItem.slug!}>\n                        <Link\n                          to={menuItem.slug!}\n                          className=\"nav-link megamenu-top-link font-weight-600\"\n                        >\n                          {t(menuItem.name)}\n                        </Link>\n                      </li>\n                    )\n                  ))\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n      </CSSTransition>\n    </nav>\n  );\n};\n\nexport default MegaMenu;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\n\nimport MegaMenu from \"./MegaMenu\";\n\nimport { getMenu, getSiteConfig } from \"../graphql/gatsby\";\nimport { getSessionInfo } from \"../utils/auth\";\nimport Icon from \"./Icon\";\n\ntype MainHeaderProps = Pick<\n  NonNullable<ReturnType<typeof getSiteConfig>>,\n  \"title\" | \"description\" | \"socialLinks\"\n> & {\n  menu: ReturnType<typeof getMenu>;\n  organization: string;\n  user: ReturnType<typeof getSessionInfo>;\n};\n\nconst MainHeader = ({\n  title,\n  description,\n  menu,\n  socialLinks,\n  organization,\n  user\n}: MainHeaderProps) => (\n  <>\n    <div className=\"it-nav-wrapper\">\n      <div className=\"it-header-center-wrapper it-small-header\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"it-header-center-content-wrapper\">\n                <div className=\"it-brand-wrapper\">\n                  <Link to=\"/\">\n                    {/* <Icon icon=\"code-circle\" /> */}\n                    <div className=\"it-brand-text\">\n                      <h2 className=\"no_toc\">{title}</h2>\n                      <h3 className=\"no_toc d-none d-md-block\">\n                        {description}\n                      </h3>\n                    </div>\n                  </Link>\n                </div>\n                <div className=\"it-right-zone\">\n                  <div className=\"d-none d-lg-block\">{organization}</div>\n                  <div className=\"it-socials d-none d-md-flex\">\n                    <ul>\n                      {(socialLinks || []).map(\n                        socialLink =>\n                          socialLink &&\n                          socialLink.name &&\n                          socialLink.url &&\n                          socialLink.icon && (\n                            <li key={socialLink.name}>\n                              <a\n                                href={socialLink.url}\n                                aria-label={socialLink.name}\n                              >\n                                <Icon icon={socialLink.icon} />\n                              </a>\n                            </li>\n                          )\n                      )}\n                    </ul>\n                  </div>\n                  <div className=\"it-search-wrapper\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"it-header-navbar-wrapper\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <MegaMenu menu={menu} user={user} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </>\n);\n\nexport default MainHeader;\n","import * as React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from \"reactstrap\";\nimport { getSiteConfig } from \"../graphql/gatsby\";\nimport { getSessionInfo, isLoggedIn } from \"../utils/auth\";\nimport Icon from \"./Icon\";\n\nconst dropdownModifiers = {\n  flip: {\n    enabled: true\n  },\n  shift: {\n    enabled: true\n  },\n  preventOverflow: {\n    enabled: true,\n    boundariesElement: \"viewport\" as \"viewport\"\n  },\n  relativePosition: {\n    enabled: true,\n    fn: (data: any) => ({\n      ...data,\n      styles: {\n        ...data.styles,\n        borderRadius: \"4px\",\n        transform: \"translate3d(0px, 55px, 0px)\",\n        animationDuration: \"0.2s\"\n      }\n    })\n  }\n};\n\ntype SlimHeaderProps = Pick<\n  NonNullable<ReturnType<typeof getSiteConfig>>,\n  // tslint:disable-next-line: max-union-size\n  \"owners\" | \"slimHeaderLinks\" | \"languages\"\n> & { user: ReturnType<typeof getSessionInfo> } & {\n  onLogout: (args: any) => any;\n};\n\nexport const SlimHeader = ({\n  owners,\n  slimHeaderLinks,\n  languages,\n  user,\n  onLogout\n}: SlimHeaderProps) => {\n  const { i18n } = useTranslation();\n  const [isLanguageDropdownOpen, setIsLanguageDropdownOpen] = React.useState(\n    false\n  );\n  const [isUserDropdownOpen, setIsUserDropdownOpen] = React.useState(false);\n  const [isLinksDropdownOpen, setIsLinksDropdownOpen] = React.useState(false);\n  return (\n    <div className=\"it-header-slim-wrapper\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"it-header-slim-wrapper-content\">\n              {(owners || []).map(\n                owner =>\n                  owner &&\n                  owner.url && (\n                    <a\n                      className=\"d-none d-lg-block navbar-brand\"\n                      href={owner.url}\n                      key={owner.url}\n                      role=\"button\"\n                      aria-expanded=\"false\"\n                      aria-controls=\"header-links\"\n                    >\n                      <span>{owner.name}</span>\n                    </a>\n                  )\n              )}\n              <div className=\"nav-mobile\">\n                <nav>\n                  {(owners || []).map(\n                    owner =>\n                      owner &&\n                      owner.url && (\n                        <a\n                          className=\"d-lg-none it-opener collapsed\"\n                          href={owner.url}\n                          key={owner.url}\n                          role=\"button\"\n                          aria-expanded=\"false\"\n                          aria-controls=\"header-links\"\n                          onClick={e => {\n                            e.preventDefault();\n                            setIsLinksDropdownOpen(!isLinksDropdownOpen);\n                          }}\n                        >\n                          <span>{owner.name}</span>\n                          <Icon className=\"icon d-lg-none\" icon=\"expand\" />\n                        </a>\n                      )\n                  )}\n                  <div\n                    className={`link-list-wrapper collapse ${\n                      isLinksDropdownOpen ? \"show\" : \"\"\n                    }`}\n                    id=\"header-links\"\n                  >\n                    <ul className=\"link-list\">\n                      {(slimHeaderLinks || []).map(\n                        slimHeaderLink =>\n                          slimHeaderLink &&\n                          slimHeaderLink.name &&\n                          slimHeaderLink.url && (\n                            <li key={slimHeaderLink.name}>\n                              <a href={slimHeaderLink.url} className=\"px-3\">\n                                {slimHeaderLink.name}\n                              </a>\n                            </li>\n                          )\n                      )}\n                    </ul>\n                  </div>\n                </nav>\n              </div>\n              <div className=\"header-slim-right-zone\">\n                {languages && (\n                  <Dropdown\n                    className=\"nav-item\"\n                    isOpen={isLanguageDropdownOpen}\n                    toggle={() =>\n                      setIsLanguageDropdownOpen(!isLanguageDropdownOpen)\n                    }\n                  >\n                    <DropdownToggle\n                      caret={true}\n                      tag=\"a\"\n                      className=\"nav-link\"\n                      style={{\n                        cursor: \"pointer\"\n                      }}\n                    >\n                      {i18n.language}\n                      <Icon className=\"icon d-block\" icon=\"expand\" />\n                    </DropdownToggle>\n                    <DropdownMenu\n                      className=\"dropdown-menu\"\n                      modifiers={dropdownModifiers}\n                    >\n                      {(languages || []).map(\n                        lang =>\n                          lang &&\n                          lang.name && (\n                            <DropdownItem key={lang.name} tag=\"span\">\n                              <a\n                                role=\"button\"\n                                href=\"#\"\n                                className=\"list-item text-primary\"\n                                onClick={() => i18n.changeLanguage(lang.name!)}\n                              >\n                                <span>{lang.name}</span>\n                              </a>\n                            </DropdownItem>\n                          )\n                      )}\n                    </DropdownMenu>\n                  </Dropdown>\n                )}\n                <div className=\"it-access-top-wrapper\">\n                  {isLoggedIn() && user ? (\n                    <Dropdown\n                      isOpen={isUserDropdownOpen}\n                      toggle={() => setIsUserDropdownOpen(!isUserDropdownOpen)}\n                    >\n                      <DropdownToggle\n                        caret={true}\n                        tag=\"a\"\n                        className=\"bg-white text-primary font-weight-600 btn btn-xs px-3 text-decoration-none\"\n                        style={{\n                          cursor: \"pointer\",\n                          marginRight: \"-16px\"\n                        }}\n                      >\n                        <Icon\n                          className=\"icon d-block d-md-none text-primary\"\n                          style={{\n                            fill: \"#0066cc\"\n                          }}\n                          icon=\"user\"\n                        />\n                        <span className=\"d-none d-md-inline-block text-lowercase text-decoration-none\">\n                          {user.userEmail}\n                        </span>\n                        <Icon\n                          className=\"icon d-none d-md-inline-block text-primary\"\n                          style={{\n                            fill: \"#0066cc\"\n                          }}\n                          icon=\"expand\"\n                        />\n                      </DropdownToggle>\n                      <DropdownMenu\n                        className=\"dropdown-menu\"\n                        modifiers={dropdownModifiers}\n                      >\n                        <span className=\"d-inline-block d-md-none p-4 text-decoration-none\">\n                          {user.userEmail}\n                        </span>\n                        <DropdownItem tag=\"span\">\n                          <a\n                            className=\"list-item text-primary\"\n                            href={`/user/${user.userId}`}\n                          >\n                            <span>profile</span>\n                          </a>\n                        </DropdownItem>\n                        <DropdownItem tag=\"span\">\n                          <a\n                            className=\"list-item text-primary\"\n                            href=\"#\"\n                            onClick={onLogout}\n                          >\n                            <span className=\"text-danger\">\n                              <Trans i18nKey=\"logout\" />\n                            </span>\n                          </a>\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </Dropdown>\n                  ) : (\n                    <a href=\"/\" className=\"btn btn-primary btn-sm\">\n                      <Trans i18nKey=\"login\" />\n                    </a>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SlimHeader;\n","require(\"typeface-lora\");\nrequire(\"typeface-titillium-web\");\n\nimport \"../styles/global.scss\";\n\nimport * as React from \"react\";\nimport { Container } from \"reactstrap\";\n\nimport Footer from \"./Footer\";\nimport MainHeader from \"./MainHeader\";\nimport SlimHeader from \"./SlimHeader\";\n\nimport { navigate } from \"gatsby\";\nimport { Trans } from \"react-i18next\";\nimport { GraphqlClient } from \"../graphql/client\";\nimport { getMenu, getSiteConfig } from \"../graphql/gatsby\";\nimport { getSessionInfo, logout } from \"../utils/auth\";\n\ntype LayoutProps = {\n  children: React.ReactNode;\n  menu: ReturnType<typeof getMenu>;\n  siteConfig: ReturnType<typeof getSiteConfig>;\n  title?: string;\n};\n\nconst Layout = ({ children, menu, title, siteConfig }: LayoutProps) => {\n  if (!siteConfig) {\n    return <p>missing site configuration.</p>;\n  }\n  const sessionInfo = getSessionInfo();\n  return (\n    <div className=\"layout-container\">\n      <div className=\"skiplinks\">\n        <a className=\"sr-only sr-only-focusable\" href=\"#main\">\n          <Trans i18nKey=\"skiplinks.goto_main\" />\n        </a>\n        <a className=\"sr-only sr-only-focusable\" href=\"#footer\">\n          <Trans i18nKey=\"skiplinks.goto_footer\" />\n        </a>\n      </div>\n      <div className=\"it-header-wrapper\">\n        <SlimHeader\n          owners={siteConfig.owners}\n          slimHeaderLinks={siteConfig.slimHeaderLinks}\n          languages={siteConfig.languages}\n          user={sessionInfo}\n          onLogout={async () => {\n            await logout(GraphqlClient);\n            navigate(\"/\");\n          }}\n        />\n        <MainHeader\n          title={siteConfig.title}\n          description={siteConfig.description}\n          socialLinks={siteConfig.socialLinks}\n          menu={menu}\n          user={sessionInfo}\n          organization={sessionInfo ? sessionInfo.organizationName : \"\"}\n        />\n      </div>\n      <Container className=\"py-5 justify-content-md-center main\" id=\"main\">\n        <main>\n          {title && <h1 style={{ color: \"white\" }}>{title}</h1>}\n          <div className=\"page-container shadow-md py-4 py-md-5 px-md-5 mt-md-4 rounded bg-white\">\n            {children}\n          </div>\n        </main>\n      </Container>\n      <Footer\n        id=\"footer\"\n        author={siteConfig.author}\n        authorLogo={siteConfig.authorLogo}\n        authorUrl={siteConfig.authorUrl}\n        footerLinks={siteConfig.footerLinks}\n        socialLinks={siteConfig.socialLinks}\n      />\n    </div>\n  );\n};\n\nexport default Layout;\n","import * as React from \"react\";\nimport Helmet from \"react-helmet\";\n\ntype SeoProps = {\n  siteConfig: any;\n  description?: string;\n  lang?: string;\n  meta?: ReadonlyArray<{\n    name: string;\n    content: string;\n  }>;\n  keywords?: ReadonlyArray<string>;\n  title: string;\n};\n\nfunction SEO({\n  siteConfig,\n  description,\n  lang = \"en\",\n  meta = [],\n  title,\n  keywords\n}: SeoProps) {\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title || siteConfig.title}\n      meta={[\n        {\n          name: `description`,\n          content: description || siteConfig.description\n        },\n        {\n          property: `og:title`,\n          content: title\n        },\n        {\n          property: `og:description`,\n          content: description || siteConfig.description\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: siteConfig.author\n        },\n        {\n          name: `twitter:title`,\n          content: title\n        },\n        {\n          name: `twitter:description`,\n          content: description || siteConfig.description\n        },\n        {\n          name: `keywords`,\n          content: keywords || siteConfig.keywords\n        }\n      ].concat(meta)}\n    >\n      <html lang={lang} />\n    </Helmet>\n  );\n}\n\nexport default SEO;\n","import * as React from \"react\";\nimport Helmet from \"react-helmet\";\n\nconst BodyStyles = ({ backgroundColor }: { backgroundColor: string }) => (\n  <Helmet>\n    <style>\n      {`\n    body {\n      background-color: ${backgroundColor} !important\n    }\n  `}\n    </style>\n  </Helmet>\n);\n\nexport default BodyStyles;\n"],"sourceRoot":""}