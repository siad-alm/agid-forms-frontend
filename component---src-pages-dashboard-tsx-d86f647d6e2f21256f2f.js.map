{"version":3,"sources":["webpack:///./src/templates/dashboard/dashboard-template.tsx","webpack:///./src/pages/dashboard.tsx","webpack:///./src/icons/icons.svg","webpack:///./src/graphql/gatsby.ts","webpack:///./src/components/Icon.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/components/MegaMenu.tsx","webpack:///./src/components/MainHeader.tsx","webpack:///./src/components/SlimHeader.tsx","webpack:///./src/components/Layout.tsx","webpack:///./src/components/Seo.tsx","webpack:///./src/graphql/hasura.ts","webpack:///./src/components/RouterPage.tsx"],"names":["DashboardTemplate","_ref","data","t","useTranslation","siteConfig","getSiteConfig","sessionInfo","getSessionInfo","userId","react","Layout","menu","getMenu","title","Seo","react_apollo_esm","query","GET_USER_NODES","variables","_ref2","userNodesLoading","loading","userNodesError","error","userNodes","JSON","stringify","className","node","map","key","id","type","Date","created_at","toLocaleDateString","updated_at","status","gatsby_browser_entry","to","replace","version","__webpack_require__","d","__webpack_exports__","Dashboard","es","RouterPage","pageComponent","dashboard_template","path","module","exports","p","getForm","Array","isArray","edges","formId","forms","allFormYaml","filter","Icon","icon","props","_objectWithoutPropertiesLoose","Object","assign","classNames","xlinkHref","Icons","Footer","footerLinks","socialLinks","author","authorLogo","authorUrl","Footer_objectWithoutPropertiesLoose","Container","Row","Col","xs","sm","md","href","target","src","alt","height","style","maxWidth","i18nKey","socialLink","name","url","aria-label","components_Icon","footerLink","color","dropdownModifiers","isOffcanvasOpen","relativePosition","enabled","fn","styles","position","transform","borderRadius","animationDuration","MegaMenu","user","_React$useState","React","setIsOffcanvasOpen","_React$useState2","isDropdownOpen","setIsDropdownOpen","aria-controls","aria-expanded","onClick","CSSTransition","in","timeout","enter","exit","enterDone","exitDone","menuItem","userHasAnyRole","roles","subtree","Dropdown","slug","tag","isOpen","toggle","_setIsDropdownOpen","DropdownToggle","caret","activeClassName","role","cursor","fill","DropdownMenu","modifiers","item","DropdownItem","MainHeader","description","organization","components_MegaMenu","flip","shift","preventOverflow","boundariesElement","SlimHeader","owners","slimHeaderLinks","languages","onLogout","i18n","isLanguageDropdownOpen","setIsLanguageDropdownOpen","isUserDropdownOpen","setIsUserDropdownOpen","_React$useState3","isLinksDropdownOpen","setIsLinksDropdownOpen","owner","e","preventDefault","slimHeaderLink","language","lang","changeLanguage","isLoggedIn","marginRight","userEmail","require","children","components_SlimHeader","regenerator_default","a","mark","_callee","wrap","_context","prev","next","logout","GraphqlClient","navigate","stop","components_MainHeader","organizationName","components_Footer","react__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","n","SEO","_ref$lang","_ref$meta","meta","keywords","htmlAttributes","content","property","concat","SEARCH_IPA","gql","_templateObject","GET_IPA","_templateObject2","NodeFragment","_templateObject3","NodeRevisionFragment","_templateObject4","UPSERT_NODE","_templateObject5","PUBLISH_NODE","_templateObject6","GET_LATEST_NODE_WITH_PUBLISHED","_templateObject7","GET_NODE_REVISION_WITH_PUBLISHED","_templateObject8","_templateObject9","_templateObject10"],"mappings":"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","file":"component---src-pages-dashboard-tsx-d86f647d6e2f21256f2f.js","sourcesContent":["import * as React from \"react\";\n\nimport Layout from \"../../components/Layout\";\nimport SEO from \"../../components/Seo\";\n\nimport { Link } from \"gatsby\";\n\nimport { Query } from \"react-apollo\";\nimport { useTranslation } from \"react-i18next\";\nimport { DashboardConfig } from \"../../generated/graphql/DashboardConfig\";\nimport {\n  GetUserNodes,\n  GetUserNodesVariables\n} from \"../../generated/graphql/GetUserNodes\";\nimport { getMenu, getSiteConfig } from \"../../graphql/gatsby\";\nimport { GET_USER_NODES } from \"../../graphql/hasura\";\nimport { getSessionInfo } from \"../../utils/auth\";\n\nconst DashboardTemplate = ({ data }: { data: DashboardConfig }) => {\n  const { t } = useTranslation();\n  const siteConfig = getSiteConfig(data);\n  const sessionInfo = getSessionInfo();\n  if (!sessionInfo || !sessionInfo.userId) {\n    return null;\n  }\n  return (\n    <Layout\n      menu={getMenu(data)}\n      siteConfig={siteConfig}\n      title={t(\"pages.dashboard_title\")}\n    >\n      <SEO title={t(\"pages.dashboard_title\")} siteConfig={siteConfig} />\n      <Query<GetUserNodes, GetUserNodesVariables>\n        query={GET_USER_NODES}\n        variables={{\n          userId: sessionInfo.userId\n        }}\n      >\n        {({\n          loading: userNodesLoading,\n          error: userNodesError,\n          data: userNodes\n        }) => {\n          if (userNodesLoading) {\n            return <p>{t(\"loading_data\")}</p>;\n          }\n          if (userNodesError) {\n            return (\n              <p>\n                {t(\"errors.error_getting_data\")}{\" \"}\n                {JSON.stringify(userNodesError)}\n              </p>\n            );\n          }\n          if (!userNodes) {\n            return (\n              <p>\n                {data}\n                {sessionInfo.userId}\n              </p>\n            );\n          }\n          return (\n            <table className=\"table table-hover\">\n              <thead className=\"lightgrey-bg-a3\">\n                <tr>\n                  <th className=\"font-variant-small-caps\">title</th>\n                  <th className=\"font-variant-small-caps\">type</th>\n                  <th className=\"font-variant-small-caps\">created</th>\n                  <th className=\"font-variant-small-caps\">updated</th>\n                  <th className=\"font-variant-small-caps\">status</th>\n                  <th className=\"font-variant-small-caps\">actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"font-size-xs color-black font-weight-600\">\n                {userNodes.node.map(node => {\n                  return (\n                    <tr key={node.id}>\n                      <td>\n                        {node.title}\n                        <br />\n                        <small>{node.id}</small>\n                      </td>\n                      <td>{node.type}</td>\n                      <td>{new Date(node.created_at).toLocaleDateString()}</td>\n                      <td>{new Date(node.updated_at).toLocaleDateString()}</td>\n                      <td>{node.status}</td>\n                      <td>\n                        <Link\n                          to={`/form/${node.type.replace(\"_\", \"-\")}/${node.id}`}\n                        >\n                          edit\n                        </Link>{\" \"}\n                        <Link to={`/revision/${node.id}/${node.version}`}>\n                          view\n                        </Link>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          );\n        }}\n      </Query>\n    </Layout>\n  );\n};\n\nexport default DashboardTemplate;\n","import { Router } from \"@reach/router\";\n\nimport { graphql } from \"gatsby\";\nimport * as React from \"react\";\n\nimport RouterPage from \"../components/RouterPage\";\n\nimport { DashboardConfig } from \"../generated/graphql/DashboardConfig\";\nimport DashboardTemplate from \"../templates/dashboard/dashboard-template\";\n\nconst Dashboard = ({ data }: { data: DashboardConfig }) => (\n  <Router>\n    <RouterPage\n      pageComponent={() => <DashboardTemplate data={data} />}\n      path=\"/dashboard\"\n    />\n  </Router>\n);\n\nexport const query = graphql`\n  query DashboardConfig {\n    menu: allConfigYaml(\n      filter: { menu: { elemMatch: { name: { ne: null } } } }\n    ) {\n      ...PageConfigFragment\n    }\n    siteConfig: allConfigYaml(filter: { title: { ne: null } }) {\n      ...SiteConfigFragment\n    }\n  }\n`;\n\nexport default Dashboard;\n","module.exports = __webpack_public_path__ + \"static/icons-6642dbab43a8aaf04fc37cc89429ceb5.svg\";","import { graphql } from \"gatsby\";\nimport { FormConfig } from \"../generated/graphql/FormConfig\";\nimport {\n  PageConfig,\n  PageConfig_menu_edges_node_menu,\n  PageConfig_siteConfig_edges_node\n} from \"../generated/graphql/PageConfig\";\nimport { ViewConfig } from \"../generated/graphql/ViewConfig\";\nimport { FormT } from \"../utils/forms\";\n\nexport const FormSchemaFragment = graphql`\n  fragment FormSchemaFragment on FormYamlConnection {\n    edges {\n      node {\n        id\n        name\n        version\n        language\n        enabled\n        slug_pattern\n        title_pattern\n        sections {\n          title\n          name\n          description\n          groups {\n            name\n            title\n            description\n            repeatable\n            fields {\n              default\n              default_checked\n              default_multiple_selection\n              description\n              name\n              multiple\n              title\n              widget\n              show_if\n              valid_if\n              required_if\n              error_msg\n              computed_value\n              options {\n                value\n                label\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const PageConfigFragment = graphql`\n  fragment PageConfigFragment on ConfigYamlConnection {\n    edges {\n      node {\n        menu {\n          name\n          slug\n          roles\n        }\n      }\n    }\n  }\n`;\n\nexport const getMenu = (\n  data: PageConfig\n): ReadonlyArray<PageConfig_menu_edges_node_menu | null> | null =>\n  data.menu && Array.isArray(data.menu.edges) && data.menu.edges[0]\n    ? data.menu.edges[0].node.menu\n    : null;\n\nexport const getSiteConfig = (\n  data: PageConfig\n): PageConfig_siteConfig_edges_node | null =>\n  data.siteConfig &&\n  Array.isArray(data.siteConfig.edges) &&\n  data.siteConfig.edges[0]\n    ? data.siteConfig.edges[0].node\n    : null;\n\nexport function getForm(\n  data: FormConfig | ViewConfig,\n  formId?: string\n): FormT | null {\n  if (!formId) {\n    return null;\n  }\n  const forms = data.allFormYaml\n    ? data.allFormYaml.edges.filter(node => node.node.id === formId)\n    : null;\n  if (!forms || !forms[0] || !forms[0].node) {\n    return null;\n  }\n  return forms[0].node;\n}\n\nexport const SiteConfigFragment = graphql`\n  fragment SiteConfigFragment on ConfigYamlConnection {\n    edges {\n      node {\n        title\n        description\n        defaultLanguage\n        author\n        authorLogo\n        authorUrl\n        homepage\n        owners {\n          name\n          url\n        }\n        languages {\n          name\n        }\n        slimHeaderLinks {\n          name\n          url\n        }\n        socialLinks {\n          name\n          url\n          icon\n        }\n        footerLinks {\n          name\n          url\n        }\n      }\n    }\n  }\n`;\n","import classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport Icons from \"../icons/icons.svg\";\n\ntype IconProps = { className?: string; icon: string } & React.SVGProps<\n  SVGSVGElement\n>;\n\nconst Icon = ({ className, icon, ...props }: IconProps) => (\n  <svg className={classNames(\"icon\", className)} {...props}>\n    <use xlinkHref={`${Icons}#it-${icon}`} />\n  </svg>\n);\n\nexport default Icon;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\n\nimport { Trans } from \"react-i18next\";\nimport { getSiteConfig } from \"../graphql/gatsby\";\nimport Icon from \"./Icon\";\n\ntype FooterProps = Pick<\n  NonNullable<ReturnType<typeof getSiteConfig>>,\n  // tslint:disable-next-line: max-union-size\n  \"footerLinks\" | \"socialLinks\" | \"author\" | \"authorLogo\" | \"authorUrl\"\n> & { id: string };\n\nconst Footer = ({\n  footerLinks,\n  socialLinks,\n  author,\n  authorLogo,\n  authorUrl,\n  ...props\n}: FooterProps) => (\n  <footer className=\"neutral-1-bg-a9\" {...props}>\n    <Container>\n      <Row className=\"py-4\">\n        <Col xs=\"12\" sm=\"6\" md=\"4\">\n          <div className=\"px-2 py-3\">\n            <a href={authorUrl || \"\"} target=\"_blank\">\n              <img\n                src={authorLogo || \"\"}\n                alt={author || \"\"}\n                height=\"36\"\n                style={{ maxWidth: `100%` }}\n              />\n            </a>\n          </div>\n        </Col>\n        <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"d-flex\">\n          <div className=\"px-2 py-2\" />\n        </Col>\n        <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"text-white text-right pt-2\">\n          <span>\n            <Trans i18nKey=\"follow_us\" />\n          </span>\n          {(socialLinks || []).map(\n            socialLink =>\n              socialLink &&\n              socialLink.icon &&\n              socialLink.name &&\n              socialLink.url && (\n                <a\n                  className=\"text-white p-2\"\n                  key={socialLink.icon}\n                  href={socialLink.url}\n                  aria-label={socialLink.name}\n                >\n                  <Icon\n                    icon={socialLink.icon}\n                    className=\"icon-sm icon-light align-top\"\n                  />\n                </a>\n              )\n          )}\n        </Col>\n      </Row>\n      <Row className=\"py-4 border-white border-top\">\n        <ul className=\"col list-inline small\">\n          {(footerLinks || []).map(\n            footerLink =>\n              footerLink &&\n              footerLink.name &&\n              footerLink.url && (\n                <li key={footerLink.name} className=\"list-inline-item px-1\">\n                  <Link\n                    className=\"small-prints font-weight-bold\"\n                    style={{ color: \"#0bd9d2\" }}\n                    to={footerLink.url}\n                  >\n                    {footerLink.name}\n                  </Link>\n                </li>\n              )\n          )}\n        </ul>\n      </Row>\n    </Container>\n  </footer>\n);\n\nexport default Footer;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from \"reactstrap\";\nimport { getMenu } from \"../graphql/gatsby\";\nimport { getSessionInfo, userHasAnyRole } from \"../utils/auth\";\nimport Icon from \"./Icon\";\n\ntype MegaMenuProps = {\n  menu: ReturnType<typeof getMenu>;\n  user: ReturnType<typeof getSessionInfo>;\n};\n\nconst BACKGROUND_COLOR = \"#ffffff\";\nconst FOREGROUND_COLOR = \"#455B71\";\n\nconst dropdownModifiers = (isOffcanvasOpen: boolean) => ({\n  relativePosition: {\n    enabled: true,\n    fn: (data: any) =>\n      isOffcanvasOpen\n        ? {\n            ...data,\n            styles: {\n              ...data.styles,\n              position: \"relative\",\n              transform: \"none\"\n            }\n          }\n        : {\n            ...data,\n            styles: {\n              ...data.styles,\n              borderRadius: \"4px\",\n              transform: \"translate3d(15px, 65px, 0px)\",\n              animationDuration: \"0.2s\"\n            }\n          }\n  }\n});\n\nexport const MegaMenu = ({ menu, user }: MegaMenuProps) => {\n  if (!menu) {\n    return null;\n  }\n  const [isOffcanvasOpen, setIsOffcanvasOpen] = React.useState(false);\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState({} as Record<\n    string,\n    boolean\n  >);\n\n  const { t } = useTranslation();\n\n  return (\n    <nav className=\"navbar navbar-expand-lg has-megamenu\">\n      <button\n        className=\"custom-navbar-toggler\"\n        type=\"button\"\n        aria-controls=\"navbarNavC\"\n        aria-expanded={isOffcanvasOpen}\n        aria-label={t(\"toggle_navigation\")}\n        onClick={() => setIsOffcanvasOpen(!isOffcanvasOpen)}\n      >\n        <Icon className=\"icon icon-sm icon-light\" icon=\"burger\" />\n      </button>\n\n      <CSSTransition\n        in={isOffcanvasOpen}\n        timeout={{\n          enter: 1,\n          exit: 300\n        }}\n        classNames={{\n          enter: \"navbar-collapsable d-block\",\n          enterDone: \"navbar-collapsable d-block expanded\",\n          exit: \"navbar-collapsable d-block\",\n          exitDone: \"navbar-collapsable\"\n        }}\n      >\n        <div className={`navbar-collapsable`} id=\"navbarNavC\">\n          <div\n            className={`overlay ${isOffcanvasOpen ? \"d-block\" : \"d-none\"}`}\n            onClick={() => setIsOffcanvasOpen(!isOffcanvasOpen)}\n          />\n          <div className=\"close-div sr-only\">\n            <button\n              className=\"btn close-menu\"\n              type=\"button\"\n              onClick={() => setIsOffcanvasOpen(!isOffcanvasOpen)}\n            >\n              <Icon className=\"icon icon-sm icon-light\" icon=\"close\" />\n              {t(\"close\")}\n            </button>\n          </div>\n          <div className=\"menu-wrapper\">\n            <ul className=\"navbar-nav megamenu-top-links shadow-md mt-4\">\n              {menu.map(menuItem => {\n                return (\n                  menuItem &&\n                  menuItem.name &&\n                  userHasAnyRole(\n                    user,\n                    (menuItem.roles as ReadonlyArray<string>) || []\n                  ) &&\n                  // TODO: remove cast\n                  ((menuItem as any).subtree ? (\n                    <Dropdown\n                      key={menuItem.slug!}\n                      className=\"nav-item megamenu\"\n                      tag=\"li\"\n                      isOpen={isDropdownOpen[menuItem.slug!]}\n                      toggle={() =>\n                        setIsDropdownOpen({\n                          [menuItem.slug!]: isDropdownOpen[menuItem.slug!]\n                            ? !isDropdownOpen[menuItem.slug!]\n                            : true\n                        })\n                      }\n                    >\n                      <DropdownToggle\n                        caret={true}\n                        tag=\"a\"\n                        className=\"nav-link megamenu-top-link font-weight-600\"\n                        activeClassName=\"active\"\n                        role=\"button\"\n                        style={{\n                          cursor: \"pointer\"\n                        }}\n                      >\n                        {t(menuItem.name)}\n                        <Icon\n                          className=\"icon d-inline-block\"\n                          icon=\"expand\"\n                          style={{\n                            fill: !isOffcanvasOpen\n                              ? FOREGROUND_COLOR\n                              : BACKGROUND_COLOR\n                          }}\n                        />\n                      </DropdownToggle>\n                      <DropdownMenu\n                        modifiers={dropdownModifiers(isOffcanvasOpen)}\n                      >\n                        <div className=\"link-list-wrapper\">\n                          <ul className=\"mt-2\">\n                            {/* TODO: remove cast */}\n                            {(menuItem as any).subtree.map(\n                              (item: any) =>\n                                item &&\n                                item.slug && (\n                                  <DropdownItem\n                                    tag=\"li\"\n                                    key={item.slug}\n                                    className=\"p-0\"\n                                  >\n                                    <Link to={item.slug} className=\"p-0\">\n                                      {t(item.name)}\n                                    </Link>\n                                  </DropdownItem>\n                                )\n                            )}\n                          </ul>\n                        </div>\n                      </DropdownMenu>\n                    </Dropdown>\n                  ) : (\n                    userHasAnyRole(\n                      user,\n                      (menuItem.roles as ReadonlyArray<string>) || []\n                    ) && (\n                      <li className=\"nav-item megamenu\" key={menuItem.slug!}>\n                        <Link\n                          to={menuItem.slug!}\n                          className=\"nav-link megamenu-top-link font-weight-600\"\n                        >\n                          {t(menuItem.name)}\n                        </Link>\n                      </li>\n                    )\n                  ))\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n      </CSSTransition>\n    </nav>\n  );\n};\n\nexport default MegaMenu;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\n\nimport MegaMenu from \"./MegaMenu\";\n\nimport { getMenu, getSiteConfig } from \"../graphql/gatsby\";\nimport { getSessionInfo } from \"../utils/auth\";\nimport Icon from \"./Icon\";\n\ntype MainHeaderProps = Pick<\n  NonNullable<ReturnType<typeof getSiteConfig>>,\n  \"title\" | \"description\" | \"socialLinks\"\n> & {\n  menu: ReturnType<typeof getMenu>;\n  organization: string;\n  user: ReturnType<typeof getSessionInfo>;\n};\n\nconst MainHeader = ({\n  title,\n  description,\n  menu,\n  socialLinks,\n  organization,\n  user\n}: MainHeaderProps) => (\n  <>\n    <div className=\"it-nav-wrapper\">\n      <div className=\"it-header-center-wrapper it-small-header\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"it-header-center-content-wrapper\">\n                <div className=\"it-brand-wrapper\">\n                  <Link to=\"/\">\n                    {/* <Icon icon=\"code-circle\" /> */}\n                    <div className=\"it-brand-text\">\n                      <h2 className=\"no_toc\">{title}</h2>\n                      <h3 className=\"no_toc d-none d-md-block\">\n                        {description}\n                      </h3>\n                    </div>\n                  </Link>\n                </div>\n                <div className=\"it-right-zone\">\n                  <div className=\"d-none d-lg-block\">{organization}</div>\n                  <div className=\"it-socials d-none d-md-flex\">\n                    <ul>\n                      {(socialLinks || []).map(\n                        socialLink =>\n                          socialLink &&\n                          socialLink.name &&\n                          socialLink.url &&\n                          socialLink.icon && (\n                            <li key={socialLink.name}>\n                              <a\n                                href={socialLink.url}\n                                aria-label={socialLink.name}\n                              >\n                                <Icon icon={socialLink.icon} />\n                              </a>\n                            </li>\n                          )\n                      )}\n                    </ul>\n                  </div>\n                  <div className=\"it-search-wrapper\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"it-header-navbar-wrapper\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <MegaMenu menu={menu} user={user} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </>\n);\n\nexport default MainHeader;\n","import * as React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from \"reactstrap\";\nimport { getSiteConfig } from \"../graphql/gatsby\";\nimport { getSessionInfo, isLoggedIn } from \"../utils/auth\";\nimport Icon from \"./Icon\";\n\nconst dropdownModifiers = {\n  flip: {\n    enabled: true\n  },\n  shift: {\n    enabled: true\n  },\n  preventOverflow: {\n    enabled: true,\n    boundariesElement: \"viewport\" as \"viewport\"\n  },\n  relativePosition: {\n    enabled: true,\n    fn: (data: any) => ({\n      ...data,\n      styles: {\n        ...data.styles,\n        borderRadius: \"4px\",\n        transform: \"translate3d(0px, 55px, 0px)\",\n        animationDuration: \"0.2s\"\n      }\n    })\n  }\n};\n\ntype SlimHeaderProps = Pick<\n  NonNullable<ReturnType<typeof getSiteConfig>>,\n  // tslint:disable-next-line: max-union-size\n  \"owners\" | \"slimHeaderLinks\" | \"languages\"\n> & { user: ReturnType<typeof getSessionInfo> } & {\n  onLogout: (args: any) => any;\n};\n\nexport const SlimHeader = ({\n  owners,\n  slimHeaderLinks,\n  languages,\n  user,\n  onLogout\n}: SlimHeaderProps) => {\n  const { i18n } = useTranslation();\n  const [isLanguageDropdownOpen, setIsLanguageDropdownOpen] = React.useState(\n    false\n  );\n  const [isUserDropdownOpen, setIsUserDropdownOpen] = React.useState(false);\n  const [isLinksDropdownOpen, setIsLinksDropdownOpen] = React.useState(false);\n  return (\n    <div className=\"it-header-slim-wrapper\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"it-header-slim-wrapper-content\">\n              {(owners || []).map(\n                owner =>\n                  owner &&\n                  owner.url && (\n                    <a\n                      className=\"d-none d-lg-block navbar-brand\"\n                      href={owner.url}\n                      key={owner.url}\n                      role=\"button\"\n                      aria-expanded=\"false\"\n                      aria-controls=\"header-links\"\n                    >\n                      <span>{owner.name}</span>\n                    </a>\n                  )\n              )}\n              <div className=\"nav-mobile\">\n                <nav>\n                  {(owners || []).map(\n                    owner =>\n                      owner &&\n                      owner.url && (\n                        <a\n                          className=\"d-lg-none it-opener collapsed\"\n                          href={owner.url}\n                          key={owner.url}\n                          role=\"button\"\n                          aria-expanded=\"false\"\n                          aria-controls=\"header-links\"\n                          onClick={e => {\n                            e.preventDefault();\n                            setIsLinksDropdownOpen(!isLinksDropdownOpen);\n                          }}\n                        >\n                          <span>{owner.name}</span>\n                          <Icon className=\"icon d-lg-none\" icon=\"expand\" />\n                        </a>\n                      )\n                  )}\n                  <div\n                    className={`link-list-wrapper collapse ${\n                      isLinksDropdownOpen ? \"show\" : \"\"\n                    }`}\n                    id=\"header-links\"\n                  >\n                    <ul className=\"link-list\">\n                      {(slimHeaderLinks || []).map(\n                        slimHeaderLink =>\n                          slimHeaderLink &&\n                          slimHeaderLink.name &&\n                          slimHeaderLink.url && (\n                            <li key={slimHeaderLink.name}>\n                              <a href={slimHeaderLink.url} className=\"px-3\">\n                                {slimHeaderLink.name}\n                              </a>\n                            </li>\n                          )\n                      )}\n                    </ul>\n                  </div>\n                </nav>\n              </div>\n              <div className=\"header-slim-right-zone\">\n                {languages && (\n                  <Dropdown\n                    className=\"nav-item\"\n                    isOpen={isLanguageDropdownOpen}\n                    toggle={() =>\n                      setIsLanguageDropdownOpen(!isLanguageDropdownOpen)\n                    }\n                  >\n                    <DropdownToggle\n                      caret={true}\n                      tag=\"a\"\n                      className=\"nav-link\"\n                      style={{\n                        cursor: \"pointer\"\n                      }}\n                    >\n                      {i18n.language}\n                      <Icon className=\"icon d-block\" icon=\"expand\" />\n                    </DropdownToggle>\n                    <DropdownMenu\n                      className=\"dropdown-menu\"\n                      modifiers={dropdownModifiers}\n                    >\n                      {(languages || []).map(\n                        lang =>\n                          lang &&\n                          lang.name && (\n                            <DropdownItem key={lang.name} tag=\"span\">\n                              <a\n                                role=\"button\"\n                                href=\"#\"\n                                className=\"list-item text-primary\"\n                                onClick={() => i18n.changeLanguage(lang.name!)}\n                              >\n                                <span>{lang.name}</span>\n                              </a>\n                            </DropdownItem>\n                          )\n                      )}\n                    </DropdownMenu>\n                  </Dropdown>\n                )}\n                <div className=\"it-access-top-wrapper\">\n                  {isLoggedIn() && user ? (\n                    <Dropdown\n                      isOpen={isUserDropdownOpen}\n                      toggle={() => setIsUserDropdownOpen(!isUserDropdownOpen)}\n                    >\n                      <DropdownToggle\n                        caret={true}\n                        tag=\"a\"\n                        className=\"bg-white text-primary font-weight-600 btn btn-xs px-3 text-decoration-none\"\n                        style={{\n                          cursor: \"pointer\",\n                          marginRight: \"-16px\"\n                        }}\n                      >\n                        <Icon\n                          className=\"icon d-block d-md-none text-primary\"\n                          style={{\n                            fill: \"#0066cc\"\n                          }}\n                          icon=\"user\"\n                        />\n                        <span className=\"d-none d-md-inline-block text-lowercase text-decoration-none\">\n                          {user.userEmail}\n                        </span>\n                        <Icon\n                          className=\"icon d-none d-md-inline-block text-primary\"\n                          style={{\n                            fill: \"#0066cc\"\n                          }}\n                          icon=\"expand\"\n                        />\n                      </DropdownToggle>\n                      <DropdownMenu\n                        className=\"dropdown-menu\"\n                        modifiers={dropdownModifiers}\n                      >\n                        <span className=\"d-inline-block d-md-none p-4 text-decoration-none\">\n                          {user.userEmail}\n                        </span>\n                        <DropdownItem tag=\"span\">\n                          <a\n                            className=\"list-item text-primary\"\n                            href={`/user/${user.userId}`}\n                          >\n                            <span>profile</span>\n                          </a>\n                        </DropdownItem>\n                        <DropdownItem tag=\"span\">\n                          <a\n                            className=\"list-item text-primary\"\n                            href=\"#\"\n                            onClick={onLogout}\n                          >\n                            <span className=\"text-danger\">\n                              <Trans i18nKey=\"logout\" />\n                            </span>\n                          </a>\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </Dropdown>\n                  ) : (\n                    <a href=\"/\" className=\"btn btn-primary btn-sm\">\n                      <Trans i18nKey=\"login\" />\n                    </a>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SlimHeader;\n","require(\"typeface-lora\");\nrequire(\"typeface-titillium-web\");\n\nimport \"../styles/global.scss\";\n\nimport * as React from \"react\";\nimport { Container } from \"reactstrap\";\n\nimport Footer from \"./Footer\";\nimport MainHeader from \"./MainHeader\";\nimport SlimHeader from \"./SlimHeader\";\n\nimport { navigate } from \"gatsby\";\nimport { Trans } from \"react-i18next\";\nimport { GraphqlClient } from \"../graphql/client\";\nimport { getMenu, getSiteConfig } from \"../graphql/gatsby\";\nimport { getSessionInfo, logout } from \"../utils/auth\";\n\ntype LayoutProps = {\n  children: React.ReactNode;\n  menu: ReturnType<typeof getMenu>;\n  siteConfig: ReturnType<typeof getSiteConfig>;\n  title?: string;\n};\n\nconst Layout = ({ children, menu, title, siteConfig }: LayoutProps) => {\n  if (!siteConfig) {\n    return <p>missing site configuration.</p>;\n  }\n  const sessionInfo = getSessionInfo();\n  return (\n    <div className=\"layout-container\">\n      <div className=\"skiplinks\">\n        <a className=\"sr-only sr-only-focusable\" href=\"#main\">\n          <Trans i18nKey=\"skiplinks.goto_main\" />\n        </a>\n        <a className=\"sr-only sr-only-focusable\" href=\"#footer\">\n          <Trans i18nKey=\"skiplinks.goto_footer\" />\n        </a>\n      </div>\n      <div className=\"it-header-wrapper\">\n        <SlimHeader\n          owners={siteConfig.owners}\n          slimHeaderLinks={siteConfig.slimHeaderLinks}\n          languages={siteConfig.languages}\n          user={sessionInfo}\n          onLogout={async () => {\n            await logout(GraphqlClient);\n            navigate(\"/\");\n          }}\n        />\n        <MainHeader\n          title={siteConfig.title}\n          description={siteConfig.description}\n          socialLinks={siteConfig.socialLinks}\n          menu={menu}\n          user={sessionInfo}\n          organization={sessionInfo ? sessionInfo.organizationName : \"\"}\n        />\n      </div>\n      <Container className=\"py-5 justify-content-md-center main\" id=\"main\">\n        <main>\n          {title && <h1 style={{ color: \"white\" }}>{title}</h1>}\n          <div className=\"page-container shadow-md py-4 py-md-5 px-md-5 mt-md-4 rounded bg-white\">\n            {children}\n          </div>\n        </main>\n      </Container>\n      <Footer\n        id=\"footer\"\n        author={siteConfig.author}\n        authorLogo={siteConfig.authorLogo}\n        authorUrl={siteConfig.authorUrl}\n        footerLinks={siteConfig.footerLinks}\n        socialLinks={siteConfig.socialLinks}\n      />\n    </div>\n  );\n};\n\nexport default Layout;\n","import * as React from \"react\";\nimport Helmet from \"react-helmet\";\n\ntype SeoProps = {\n  siteConfig: any;\n  description?: string;\n  lang?: string;\n  meta?: ReadonlyArray<{\n    name: string;\n    content: string;\n  }>;\n  keywords?: ReadonlyArray<string>;\n  title: string;\n};\n\nfunction SEO({\n  siteConfig,\n  description,\n  lang = \"en\",\n  meta = [],\n  title,\n  keywords\n}: SeoProps) {\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title || siteConfig.title}\n      meta={[\n        {\n          name: `description`,\n          content: description || siteConfig.description\n        },\n        {\n          property: `og:title`,\n          content: title\n        },\n        {\n          property: `og:description`,\n          content: description || siteConfig.description\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: siteConfig.author\n        },\n        {\n          name: `twitter:title`,\n          content: title\n        },\n        {\n          name: `twitter:description`,\n          content: description || siteConfig.description\n        },\n        {\n          name: `keywords`,\n          content: keywords || siteConfig.keywords\n        }\n      ].concat(meta)}\n    >\n      <html lang={lang} />\n    </Helmet>\n  );\n}\n\nexport default SEO;\n","import gql from \"graphql-tag\";\n\nexport const SEARCH_IPA = gql`\n  query SearchIpa($search: String!) {\n    search_ipa(args: { search: $search }) {\n      cod_amm\n      des_amm\n      Comune\n    }\n    ipa_pa(where: { cod_amm: { _eq: $search } }) {\n      cod_amm\n      des_amm\n      Comune\n    }\n  }\n`;\n\nexport const GET_IPA = gql`\n  query GetIpa($ipa_code: String!) {\n    ipa_pa(where: { cod_amm: { _eq: $ipa_code } }) {\n      cod_amm\n      des_amm\n      Comune\n    }\n    ipa_ou(\n      where: {\n        _and: {\n          cod_amm: { _eq: $ipa_code }\n          cod_ou: { _eq: \"Ufficio_Transizione_Digitale\" }\n        }\n      }\n    ) {\n      cod_ou\n      nome_resp\n      cogn_resp\n      mail_resp\n    }\n  }\n`;\n\nexport const NodeFragment = gql`\n  fragment NodeFragment on node {\n    id\n    created_at\n    updated_at\n    title\n    node_group {\n      group\n      group_ipa_pa {\n        des_amm\n      }\n    }\n    content\n    language\n    status\n    version\n    type\n  }\n`;\n\nexport const NodeRevisionFragment = gql`\n  fragment NodeRevisionFragment on node_revision {\n    id\n    created_at\n    updated_at\n    title\n    node_revision_group {\n      group\n      group_ipa_pa {\n        des_amm\n      }\n    }\n    content\n    language\n    status\n    version\n    type\n  }\n`;\n\nexport const UPSERT_NODE = gql`\n  mutation UpsertNode($node: node_insert_input!) {\n    insert_node(\n      objects: [$node]\n      on_conflict: {\n        constraint: node_pkey\n        update_columns: [status, title, content, version]\n      }\n    ) {\n      returning {\n        ...NodeFragment\n      }\n    }\n  }\n\n  ${NodeFragment}\n`;\n\nexport const PUBLISH_NODE = gql`\n  mutation PublishNode($id: uuid!, $version: Int!) {\n    update_node(\n      where: { id: { _eq: $id } }\n      _set: { status: \"published\", version: $version }\n    ) {\n      returning {\n        ...NodeFragment\n      }\n    }\n  }\n  ${NodeFragment}\n`;\n\nexport const GET_LATEST_NODE_WITH_PUBLISHED = gql`\n  query GetNode($id: uuid!) {\n    latest: node(where: { id: { _eq: $id } }, limit: 1) {\n      ...NodeFragment\n      published: revisions(\n        where: { status: { _eq: \"published\" } }\n        order_by: { version: desc }\n        limit: 1\n      ) {\n        ...NodeRevisionFragment\n      }\n    }\n  }\n\n  ${NodeFragment}\n  ${NodeRevisionFragment}\n`;\n\nexport const GET_NODE_REVISION_WITH_PUBLISHED = gql`\n  query GetNodeRevision($id: uuid!, $version: Int!) {\n    revision: node_revision(\n      where: { _and: { id: { _eq: $id }, version: { _eq: $version } } }\n      limit: 1\n    ) {\n      ...NodeRevisionFragment\n    }\n    published: node_revision(\n      where: { _and: { id: { _eq: $id }, status: { _eq: \"published\" } } }\n      order_by: { version: desc }\n      limit: 1\n    ) {\n      ...NodeRevisionFragment\n    }\n  }\n\n  ${NodeRevisionFragment}\n`;\n\nexport const GET_USER_NODES = gql`\n  query GetUserNodes($userId: uuid) {\n    node(where: { user_id: { _eq: $userId } }) {\n      id\n      created_at\n      updated_at\n      title\n      group\n      language\n      status\n      version\n      type\n    }\n  }\n`;\n\nexport const GET_USER_INFO = gql`\n  query GetUserInfo($userId: uuid) {\n    user(where: { id: { _eq: $userId } }) {\n      id\n      email\n    }\n  }\n`;\n","import { RouteComponentProps } from \"@reach/router\";\n\nconst RouterPage = ({\n  pageComponent,\n  ...routerProps\n}: {\n  pageComponent: (routerProps: RouteComponentProps) => JSX.Element;\n} & RouteComponentProps) => {\n  return pageComponent(routerProps);\n};\n\nexport default RouterPage;\n"],"sourceRoot":""}