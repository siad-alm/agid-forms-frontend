{"version":3,"sources":["webpack:///./src/pages/404.tsx","webpack:///./src/icons/icons.svg","webpack:///./src/graphql/gatsby.ts","webpack:///./src/components/Icon.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/components/MegaMenu.tsx","webpack:///./src/components/MainHeader.tsx","webpack:///./src/components/SlimHeader.tsx","webpack:///./src/components/Layout.tsx","webpack:///./src/components/Seo.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react_i18next__WEBPACK_IMPORTED_MODULE_1__","_components_Layout__WEBPACK_IMPORTED_MODULE_2__","_components_Seo__WEBPACK_IMPORTED_MODULE_3__","_graphql_gatsby__WEBPACK_IMPORTED_MODULE_4__","NotFoundPage","_ref","data","t","useTranslation","siteConfig","getSiteConfig","menu","getMenu","title","module","exports","p","getForm","Array","isArray","edges","node","formId","forms","allFormYaml","filter","id","Icon","className","icon","props","_objectWithoutPropertiesLoose","react","Object","assign","classNames","xlinkHref","Icons","Footer","footerLinks","socialLinks","author","authorLogo","authorUrl","Footer_objectWithoutPropertiesLoose","Container","Row","Col","xs","sm","md","href","target","src","alt","height","style","maxWidth","es","i18nKey","map","socialLink","name","url","key","aria-label","components_Icon","footerLink","gatsby_browser_entry","color","to","dropdownModifiers","isOffcanvasOpen","relativePosition","enabled","fn","styles","position","transform","borderRadius","animationDuration","MegaMenu","user","_React$useState","React","setIsOffcanvasOpen","_React$useState2","isDropdownOpen","setIsDropdownOpen","type","aria-controls","aria-expanded","onClick","CSSTransition","in","timeout","enter","exit","enterDone","exitDone","menuItem","userHasAnyRole","roles","subtree","Dropdown","slug","tag","isOpen","toggle","_setIsDropdownOpen","DropdownToggle","caret","activeClassName","role","cursor","fill","DropdownMenu","modifiers","item","DropdownItem","MainHeader","description","organization","components_MegaMenu","flip","shift","preventOverflow","boundariesElement","SlimHeader","owners","slimHeaderLinks","languages","onLogout","i18n","isLanguageDropdownOpen","setIsLanguageDropdownOpen","isUserDropdownOpen","setIsUserDropdownOpen","_React$useState3","isLinksDropdownOpen","setIsLinksDropdownOpen","owner","e","preventDefault","slimHeaderLink","language","lang","changeLanguage","isLoggedIn","marginRight","userEmail","userId","require","Layout","children","sessionInfo","getSessionInfo","components_SlimHeader","regenerator_default","a","mark","_callee","wrap","_context","prev","next","logout","GraphqlClient","navigate","stop","components_MainHeader","organizationName","components_Footer","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","n","SEO","_ref$lang","_ref$meta","meta","keywords","htmlAttributes","content","property","concat"],"mappings":"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","file":"component---src-pages-404-tsx-2e82dae0fbc16dbab084.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/Seo\";\nimport { NotFoundConfig } from \"../generated/graphql/NotFoundConfig\";\nimport { getMenu, getSiteConfig } from \"../graphql/gatsby\";\n\nconst NotFoundPage = ({ data }: { data: NotFoundConfig }) => {\n  const { t } = useTranslation();\n  const siteConfig = getSiteConfig(data);\n  return (\n    <Layout\n      menu={getMenu(data)}\n      siteConfig={siteConfig}\n      title={t(\"pages.notfound_page_title\")}\n    >\n      <SEO title={t(\"pages.notfound_page_title\")} siteConfig={siteConfig} />\n      <p>{t(\"pages.notfound_page_text\")}</p>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query NotFoundConfig {\n    menu: allConfigYaml(\n      filter: { menu: { elemMatch: { name: { ne: null } } } }\n    ) {\n      ...PageConfigFragment\n    }\n    siteConfig: allConfigYaml(filter: { title: { ne: null } }) {\n      ...SiteConfigFragment\n    }\n  }\n`;\n\nexport default NotFoundPage;\n","module.exports = __webpack_public_path__ + \"static/icons-6642dbab43a8aaf04fc37cc89429ceb5.svg\";","import { graphql } from \"gatsby\";\nimport { FormConfig } from \"../generated/graphql/FormConfig\";\nimport {\n  PageConfig,\n  PageConfig_menu_edges_node_menu,\n  PageConfig_siteConfig_edges_node\n} from \"../generated/graphql/PageConfig\";\nimport { ViewConfig } from \"../generated/graphql/ViewConfig\";\nimport { FormT } from \"../utils/forms\";\n\nexport const FormSchemaFragment = graphql`\n  fragment FormSchemaFragment on FormYamlConnection {\n    edges {\n      node {\n        id\n        name\n        version\n        language\n        enabled\n        slug_pattern\n        title_pattern\n        sections {\n          title\n          name\n          description\n          groups {\n            name\n            title\n            description\n            repeatable\n            fields {\n              default\n              default_checked\n              default_multiple_selection\n              description\n              name\n              multiple\n              title\n              widget\n              show_if\n              valid_if\n              required_if\n              error_msg\n              computed_value\n              options {\n                value\n                label\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const PageConfigFragment = graphql`\n  fragment PageConfigFragment on ConfigYamlConnection {\n    edges {\n      node {\n        menu {\n          name\n          slug\n          roles\n        }\n      }\n    }\n  }\n`;\n\nexport const getMenu = (\n  data: PageConfig\n): ReadonlyArray<PageConfig_menu_edges_node_menu | null> | null =>\n  data.menu && Array.isArray(data.menu.edges) && data.menu.edges[0]\n    ? data.menu.edges[0].node.menu\n    : null;\n\nexport const getSiteConfig = (\n  data: PageConfig\n): PageConfig_siteConfig_edges_node | null =>\n  data.siteConfig &&\n  Array.isArray(data.siteConfig.edges) &&\n  data.siteConfig.edges[0]\n    ? data.siteConfig.edges[0].node\n    : null;\n\nexport function getForm(\n  data: FormConfig | ViewConfig,\n  formId?: string\n): FormT | null {\n  if (!formId) {\n    return null;\n  }\n  const forms = data.allFormYaml\n    ? data.allFormYaml.edges.filter(node => node.node.id === formId)\n    : null;\n  if (!forms || !forms[0] || !forms[0].node) {\n    return null;\n  }\n  return forms[0].node;\n}\n\nexport const SiteConfigFragment = graphql`\n  fragment SiteConfigFragment on ConfigYamlConnection {\n    edges {\n      node {\n        title\n        description\n        defaultLanguage\n        author\n        authorLogo\n        authorUrl\n        homepage\n        owners {\n          name\n          url\n        }\n        languages {\n          name\n        }\n        slimHeaderLinks {\n          name\n          url\n        }\n        socialLinks {\n          name\n          url\n          icon\n        }\n        footerLinks {\n          name\n          url\n        }\n      }\n    }\n  }\n`;\n","import classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport Icons from \"../icons/icons.svg\";\n\ntype IconProps = { className?: string; icon: string } & React.SVGProps<\n  SVGSVGElement\n>;\n\nconst Icon = ({ className, icon, ...props }: IconProps) => (\n  <svg className={classNames(\"icon\", className)} {...props}>\n    <use xlinkHref={`${Icons}#it-${icon}`} />\n  </svg>\n);\n\nexport default Icon;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\n\nimport { Trans } from \"react-i18next\";\nimport { getSiteConfig } from \"../graphql/gatsby\";\nimport Icon from \"./Icon\";\n\ntype FooterProps = Pick<\n  NonNullable<ReturnType<typeof getSiteConfig>>,\n  // tslint:disable-next-line: max-union-size\n  \"footerLinks\" | \"socialLinks\" | \"author\" | \"authorLogo\" | \"authorUrl\"\n> & { id: string };\n\nconst Footer = ({\n  footerLinks,\n  socialLinks,\n  author,\n  authorLogo,\n  authorUrl,\n  ...props\n}: FooterProps) => (\n  <footer className=\"neutral-1-bg-a9\" {...props}>\n    <Container>\n      <Row className=\"py-4\">\n        <Col xs=\"12\" sm=\"6\" md=\"4\">\n          <div className=\"px-2 py-3\">\n            <a href={authorUrl || \"\"} target=\"_blank\">\n              <img\n                src={authorLogo || \"\"}\n                alt={author || \"\"}\n                height=\"36\"\n                style={{ maxWidth: `100%` }}\n              />\n            </a>\n          </div>\n        </Col>\n        <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"d-flex\">\n          <div className=\"px-2 py-2\" />\n        </Col>\n        <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"text-white text-right pt-2\">\n          <span>\n            <Trans i18nKey=\"follow_us\" />\n          </span>\n          {(socialLinks || []).map(\n            socialLink =>\n              socialLink &&\n              socialLink.icon &&\n              socialLink.name &&\n              socialLink.url && (\n                <a\n                  className=\"text-white p-2\"\n                  key={socialLink.icon}\n                  href={socialLink.url}\n                  aria-label={socialLink.name}\n                >\n                  <Icon\n                    icon={socialLink.icon}\n                    className=\"icon-sm icon-light align-top\"\n                  />\n                </a>\n              )\n          )}\n        </Col>\n      </Row>\n      <Row className=\"py-4 border-white border-top\">\n        <ul className=\"col list-inline small\">\n          {(footerLinks || []).map(\n            footerLink =>\n              footerLink &&\n              footerLink.name &&\n              footerLink.url && (\n                <li key={footerLink.name} className=\"list-inline-item px-1\">\n                  <Link\n                    className=\"small-prints font-weight-bold\"\n                    style={{ color: \"#0bd9d2\" }}\n                    to={footerLink.url}\n                  >\n                    {footerLink.name}\n                  </Link>\n                </li>\n              )\n          )}\n        </ul>\n      </Row>\n    </Container>\n  </footer>\n);\n\nexport default Footer;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport { CSSTransition } from \"react-transition-group\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from \"reactstrap\";\nimport { getMenu } from \"../graphql/gatsby\";\nimport { getSessionInfo, userHasAnyRole } from \"../utils/auth\";\nimport Icon from \"./Icon\";\n\ntype MegaMenuProps = {\n  menu: ReturnType<typeof getMenu>;\n  user: ReturnType<typeof getSessionInfo>;\n};\n\nconst BACKGROUND_COLOR = \"#ffffff\";\nconst FOREGROUND_COLOR = \"#455B71\";\n\nconst dropdownModifiers = (isOffcanvasOpen: boolean) => ({\n  relativePosition: {\n    enabled: true,\n    fn: (data: any) =>\n      isOffcanvasOpen\n        ? {\n            ...data,\n            styles: {\n              ...data.styles,\n              position: \"relative\",\n              transform: \"none\"\n            }\n          }\n        : {\n            ...data,\n            styles: {\n              ...data.styles,\n              borderRadius: \"4px\",\n              transform: \"translate3d(15px, 65px, 0px)\",\n              animationDuration: \"0.2s\"\n            }\n          }\n  }\n});\n\nexport const MegaMenu = ({ menu, user }: MegaMenuProps) => {\n  if (!menu) {\n    return null;\n  }\n  const [isOffcanvasOpen, setIsOffcanvasOpen] = React.useState(false);\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState({} as Record<\n    string,\n    boolean\n  >);\n\n  const { t } = useTranslation();\n\n  return (\n    <nav className=\"navbar navbar-expand-lg has-megamenu\">\n      <button\n        className=\"custom-navbar-toggler\"\n        type=\"button\"\n        aria-controls=\"navbarNavC\"\n        aria-expanded={isOffcanvasOpen}\n        aria-label={t(\"toggle_navigation\")}\n        onClick={() => setIsOffcanvasOpen(!isOffcanvasOpen)}\n      >\n        <Icon className=\"icon icon-sm icon-light\" icon=\"burger\" />\n      </button>\n\n      <CSSTransition\n        in={isOffcanvasOpen}\n        timeout={{\n          enter: 1,\n          exit: 300\n        }}\n        classNames={{\n          enter: \"navbar-collapsable d-block\",\n          enterDone: \"navbar-collapsable d-block expanded\",\n          exit: \"navbar-collapsable d-block\",\n          exitDone: \"navbar-collapsable\"\n        }}\n      >\n        <div className={`navbar-collapsable`} id=\"navbarNavC\">\n          <div\n            className={`overlay ${isOffcanvasOpen ? \"d-block\" : \"d-none\"}`}\n            onClick={() => setIsOffcanvasOpen(!isOffcanvasOpen)}\n          />\n          <div className=\"close-div sr-only\">\n            <button\n              className=\"btn close-menu\"\n              type=\"button\"\n              onClick={() => setIsOffcanvasOpen(!isOffcanvasOpen)}\n            >\n              <Icon className=\"icon icon-sm icon-light\" icon=\"close\" />\n              {t(\"close\")}\n            </button>\n          </div>\n          <div className=\"menu-wrapper\">\n            <ul className=\"navbar-nav megamenu-top-links shadow-md mt-4\">\n              {menu.map(menuItem => {\n                return (\n                  menuItem &&\n                  menuItem.name &&\n                  userHasAnyRole(\n                    user,\n                    (menuItem.roles as ReadonlyArray<string>) || []\n                  ) &&\n                  // TODO: remove cast\n                  ((menuItem as any).subtree ? (\n                    <Dropdown\n                      key={menuItem.slug!}\n                      className=\"nav-item megamenu\"\n                      tag=\"li\"\n                      isOpen={isDropdownOpen[menuItem.slug!]}\n                      toggle={() =>\n                        setIsDropdownOpen({\n                          [menuItem.slug!]: isDropdownOpen[menuItem.slug!]\n                            ? !isDropdownOpen[menuItem.slug!]\n                            : true\n                        })\n                      }\n                    >\n                      <DropdownToggle\n                        caret={true}\n                        tag=\"a\"\n                        className=\"nav-link megamenu-top-link font-weight-600\"\n                        activeClassName=\"active\"\n                        role=\"button\"\n                        style={{\n                          cursor: \"pointer\"\n                        }}\n                      >\n                        {t(menuItem.name)}\n                        <Icon\n                          className=\"icon d-inline-block\"\n                          icon=\"expand\"\n                          style={{\n                            fill: !isOffcanvasOpen\n                              ? FOREGROUND_COLOR\n                              : BACKGROUND_COLOR\n                          }}\n                        />\n                      </DropdownToggle>\n                      <DropdownMenu\n                        modifiers={dropdownModifiers(isOffcanvasOpen)}\n                      >\n                        <div className=\"link-list-wrapper\">\n                          <ul className=\"mt-2\">\n                            {/* TODO: remove cast */}\n                            {(menuItem as any).subtree.map(\n                              (item: any) =>\n                                item &&\n                                item.slug && (\n                                  <DropdownItem\n                                    tag=\"li\"\n                                    key={item.slug}\n                                    className=\"p-0\"\n                                  >\n                                    <Link to={item.slug} className=\"p-0\">\n                                      {t(item.name)}\n                                    </Link>\n                                  </DropdownItem>\n                                )\n                            )}\n                          </ul>\n                        </div>\n                      </DropdownMenu>\n                    </Dropdown>\n                  ) : (\n                    userHasAnyRole(\n                      user,\n                      (menuItem.roles as ReadonlyArray<string>) || []\n                    ) && (\n                      <li className=\"nav-item megamenu\" key={menuItem.slug!}>\n                        <Link\n                          to={menuItem.slug!}\n                          className=\"nav-link megamenu-top-link font-weight-600\"\n                        >\n                          {t(menuItem.name)}\n                        </Link>\n                      </li>\n                    )\n                  ))\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n      </CSSTransition>\n    </nav>\n  );\n};\n\nexport default MegaMenu;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\n\nimport MegaMenu from \"./MegaMenu\";\n\nimport { getMenu, getSiteConfig } from \"../graphql/gatsby\";\nimport { getSessionInfo } from \"../utils/auth\";\nimport Icon from \"./Icon\";\n\ntype MainHeaderProps = Pick<\n  NonNullable<ReturnType<typeof getSiteConfig>>,\n  \"title\" | \"description\" | \"socialLinks\"\n> & {\n  menu: ReturnType<typeof getMenu>;\n  organization: string;\n  user: ReturnType<typeof getSessionInfo>;\n};\n\nconst MainHeader = ({\n  title,\n  description,\n  menu,\n  socialLinks,\n  organization,\n  user\n}: MainHeaderProps) => (\n  <>\n    <div className=\"it-nav-wrapper\">\n      <div className=\"it-header-center-wrapper it-small-header\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"it-header-center-content-wrapper\">\n                <div className=\"it-brand-wrapper\">\n                  <Link to=\"/\">\n                    {/* <Icon icon=\"code-circle\" /> */}\n                    <div className=\"it-brand-text\">\n                      <h2 className=\"no_toc\">{title}</h2>\n                      <h3 className=\"no_toc d-none d-md-block\">\n                        {description}\n                      </h3>\n                    </div>\n                  </Link>\n                </div>\n                <div className=\"it-right-zone\">\n                  <div className=\"d-none d-lg-block\">{organization}</div>\n                  <div className=\"it-socials d-none d-md-flex\">\n                    <ul>\n                      {(socialLinks || []).map(\n                        socialLink =>\n                          socialLink &&\n                          socialLink.name &&\n                          socialLink.url &&\n                          socialLink.icon && (\n                            <li key={socialLink.name}>\n                              <a\n                                href={socialLink.url}\n                                aria-label={socialLink.name}\n                              >\n                                <Icon icon={socialLink.icon} />\n                              </a>\n                            </li>\n                          )\n                      )}\n                    </ul>\n                  </div>\n                  <div className=\"it-search-wrapper\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"it-header-navbar-wrapper\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <MegaMenu menu={menu} user={user} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </>\n);\n\nexport default MainHeader;\n","import * as React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from \"reactstrap\";\nimport { getSiteConfig } from \"../graphql/gatsby\";\nimport { getSessionInfo, isLoggedIn } from \"../utils/auth\";\nimport Icon from \"./Icon\";\n\nconst dropdownModifiers = {\n  flip: {\n    enabled: true\n  },\n  shift: {\n    enabled: true\n  },\n  preventOverflow: {\n    enabled: true,\n    boundariesElement: \"viewport\" as \"viewport\"\n  },\n  relativePosition: {\n    enabled: true,\n    fn: (data: any) => ({\n      ...data,\n      styles: {\n        ...data.styles,\n        borderRadius: \"4px\",\n        transform: \"translate3d(0px, 55px, 0px)\",\n        animationDuration: \"0.2s\"\n      }\n    })\n  }\n};\n\ntype SlimHeaderProps = Pick<\n  NonNullable<ReturnType<typeof getSiteConfig>>,\n  // tslint:disable-next-line: max-union-size\n  \"owners\" | \"slimHeaderLinks\" | \"languages\"\n> & { user: ReturnType<typeof getSessionInfo> } & {\n  onLogout: (args: any) => any;\n};\n\nexport const SlimHeader = ({\n  owners,\n  slimHeaderLinks,\n  languages,\n  user,\n  onLogout\n}: SlimHeaderProps) => {\n  const { i18n } = useTranslation();\n  const [isLanguageDropdownOpen, setIsLanguageDropdownOpen] = React.useState(\n    false\n  );\n  const [isUserDropdownOpen, setIsUserDropdownOpen] = React.useState(false);\n  const [isLinksDropdownOpen, setIsLinksDropdownOpen] = React.useState(false);\n  return (\n    <div className=\"it-header-slim-wrapper\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"it-header-slim-wrapper-content\">\n              {(owners || []).map(\n                owner =>\n                  owner &&\n                  owner.url && (\n                    <a\n                      className=\"d-none d-lg-block navbar-brand\"\n                      href={owner.url}\n                      key={owner.url}\n                      role=\"button\"\n                      aria-expanded=\"false\"\n                      aria-controls=\"header-links\"\n                    >\n                      <span>{owner.name}</span>\n                    </a>\n                  )\n              )}\n              <div className=\"nav-mobile\">\n                <nav>\n                  {(owners || []).map(\n                    owner =>\n                      owner &&\n                      owner.url && (\n                        <a\n                          className=\"d-lg-none it-opener collapsed\"\n                          href={owner.url}\n                          key={owner.url}\n                          role=\"button\"\n                          aria-expanded=\"false\"\n                          aria-controls=\"header-links\"\n                          onClick={e => {\n                            e.preventDefault();\n                            setIsLinksDropdownOpen(!isLinksDropdownOpen);\n                          }}\n                        >\n                          <span>{owner.name}</span>\n                          <Icon className=\"icon d-lg-none\" icon=\"expand\" />\n                        </a>\n                      )\n                  )}\n                  <div\n                    className={`link-list-wrapper collapse ${\n                      isLinksDropdownOpen ? \"show\" : \"\"\n                    }`}\n                    id=\"header-links\"\n                  >\n                    <ul className=\"link-list\">\n                      {(slimHeaderLinks || []).map(\n                        slimHeaderLink =>\n                          slimHeaderLink &&\n                          slimHeaderLink.name &&\n                          slimHeaderLink.url && (\n                            <li key={slimHeaderLink.name}>\n                              <a href={slimHeaderLink.url} className=\"px-3\">\n                                {slimHeaderLink.name}\n                              </a>\n                            </li>\n                          )\n                      )}\n                    </ul>\n                  </div>\n                </nav>\n              </div>\n              <div className=\"header-slim-right-zone\">\n                {languages && (\n                  <Dropdown\n                    className=\"nav-item\"\n                    isOpen={isLanguageDropdownOpen}\n                    toggle={() =>\n                      setIsLanguageDropdownOpen(!isLanguageDropdownOpen)\n                    }\n                  >\n                    <DropdownToggle\n                      caret={true}\n                      tag=\"a\"\n                      className=\"nav-link\"\n                      style={{\n                        cursor: \"pointer\"\n                      }}\n                    >\n                      {i18n.language}\n                      <Icon className=\"icon d-block\" icon=\"expand\" />\n                    </DropdownToggle>\n                    <DropdownMenu\n                      className=\"dropdown-menu\"\n                      modifiers={dropdownModifiers}\n                    >\n                      {(languages || []).map(\n                        lang =>\n                          lang &&\n                          lang.name && (\n                            <DropdownItem key={lang.name} tag=\"span\">\n                              <a\n                                role=\"button\"\n                                href=\"#\"\n                                className=\"list-item text-primary\"\n                                onClick={() => i18n.changeLanguage(lang.name!)}\n                              >\n                                <span>{lang.name}</span>\n                              </a>\n                            </DropdownItem>\n                          )\n                      )}\n                    </DropdownMenu>\n                  </Dropdown>\n                )}\n                <div className=\"it-access-top-wrapper\">\n                  {isLoggedIn() && user ? (\n                    <Dropdown\n                      isOpen={isUserDropdownOpen}\n                      toggle={() => setIsUserDropdownOpen(!isUserDropdownOpen)}\n                    >\n                      <DropdownToggle\n                        caret={true}\n                        tag=\"a\"\n                        className=\"bg-white text-primary font-weight-600 btn btn-xs px-3 text-decoration-none\"\n                        style={{\n                          cursor: \"pointer\",\n                          marginRight: \"-16px\"\n                        }}\n                      >\n                        <Icon\n                          className=\"icon d-block d-md-none text-primary\"\n                          style={{\n                            fill: \"#0066cc\"\n                          }}\n                          icon=\"user\"\n                        />\n                        <span className=\"d-none d-md-inline-block text-lowercase text-decoration-none\">\n                          {user.userEmail}\n                        </span>\n                        <Icon\n                          className=\"icon d-none d-md-inline-block text-primary\"\n                          style={{\n                            fill: \"#0066cc\"\n                          }}\n                          icon=\"expand\"\n                        />\n                      </DropdownToggle>\n                      <DropdownMenu\n                        className=\"dropdown-menu\"\n                        modifiers={dropdownModifiers}\n                      >\n                        <span className=\"d-inline-block d-md-none p-4 text-decoration-none\">\n                          {user.userEmail}\n                        </span>\n                        <DropdownItem tag=\"span\">\n                          <a\n                            className=\"list-item text-primary\"\n                            href={`/user/${user.userId}`}\n                          >\n                            <span>profile</span>\n                          </a>\n                        </DropdownItem>\n                        <DropdownItem tag=\"span\">\n                          <a\n                            className=\"list-item text-primary\"\n                            href=\"#\"\n                            onClick={onLogout}\n                          >\n                            <span className=\"text-danger\">\n                              <Trans i18nKey=\"logout\" />\n                            </span>\n                          </a>\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </Dropdown>\n                  ) : (\n                    <a href=\"/\" className=\"btn btn-primary btn-sm\">\n                      <Trans i18nKey=\"login\" />\n                    </a>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SlimHeader;\n","require(\"typeface-lora\");\nrequire(\"typeface-titillium-web\");\n\nimport \"../styles/global.scss\";\n\nimport * as React from \"react\";\nimport { Container } from \"reactstrap\";\n\nimport Footer from \"./Footer\";\nimport MainHeader from \"./MainHeader\";\nimport SlimHeader from \"./SlimHeader\";\n\nimport { navigate } from \"gatsby\";\nimport { Trans } from \"react-i18next\";\nimport { GraphqlClient } from \"../graphql/client\";\nimport { getMenu, getSiteConfig } from \"../graphql/gatsby\";\nimport { getSessionInfo, logout } from \"../utils/auth\";\n\ntype LayoutProps = {\n  children: React.ReactNode;\n  menu: ReturnType<typeof getMenu>;\n  siteConfig: ReturnType<typeof getSiteConfig>;\n  title?: string;\n};\n\nconst Layout = ({ children, menu, title, siteConfig }: LayoutProps) => {\n  if (!siteConfig) {\n    return <p>missing site configuration.</p>;\n  }\n  const sessionInfo = getSessionInfo();\n  return (\n    <>\n      <div className=\"skiplinks\">\n        <a className=\"sr-only sr-only-focusable\" href=\"#main\">\n          <Trans i18nKey=\"skiplinks.goto_main\" />\n        </a>\n        <a className=\"sr-only sr-only-focusable\" href=\"#footer\">\n          <Trans i18nKey=\"skiplinks.goto_footer\" />\n        </a>\n      </div>\n      <div className=\"it-header-wrapper\">\n        <SlimHeader\n          owners={siteConfig.owners}\n          slimHeaderLinks={siteConfig.slimHeaderLinks}\n          languages={siteConfig.languages}\n          user={sessionInfo}\n          onLogout={async () => {\n            await logout(GraphqlClient);\n            navigate(\"/\");\n          }}\n        />\n        <MainHeader\n          title={siteConfig.title}\n          description={siteConfig.description}\n          socialLinks={siteConfig.socialLinks}\n          menu={menu}\n          user={sessionInfo}\n          organization={sessionInfo ? sessionInfo.organizationName : \"\"}\n        />\n      </div>\n      <Container className=\"py-5 justify-content-md-center main\" id=\"main\">\n        <main>\n          {title && <h1 style={{ color: \"white\" }}>{title}</h1>}\n          <div className=\"page-container shadow-md py-4 py-md-5 px-md-5 mt-md-4 rounded bg-white\">\n            {children}\n          </div>\n        </main>\n      </Container>\n      <Footer\n        id=\"footer\"\n        author={siteConfig.author}\n        authorLogo={siteConfig.authorLogo}\n        authorUrl={siteConfig.authorUrl}\n        footerLinks={siteConfig.footerLinks}\n        socialLinks={siteConfig.socialLinks}\n      />\n    </>\n  );\n};\n\nexport default Layout;\n","import * as React from \"react\";\nimport Helmet from \"react-helmet\";\n\ntype SeoProps = {\n  siteConfig: any;\n  description?: string;\n  lang?: string;\n  meta?: ReadonlyArray<{\n    name: string;\n    content: string;\n  }>;\n  keywords?: ReadonlyArray<string>;\n  title: string;\n};\n\nfunction SEO({\n  siteConfig,\n  description,\n  lang = \"en\",\n  meta = [],\n  title,\n  keywords\n}: SeoProps) {\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title || siteConfig.title}\n      meta={[\n        {\n          name: `description`,\n          content: description || siteConfig.description\n        },\n        {\n          property: `og:title`,\n          content: title\n        },\n        {\n          property: `og:description`,\n          content: description || siteConfig.description\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: siteConfig.author\n        },\n        {\n          name: `twitter:title`,\n          content: title\n        },\n        {\n          name: `twitter:description`,\n          content: description || siteConfig.description\n        },\n        {\n          name: `keywords`,\n          content: keywords || siteConfig.keywords\n        }\n      ].concat(meta)}\n    >\n      <html lang={lang} />\n    </Helmet>\n  );\n}\n\nexport default SEO;\n"],"sourceRoot":""}